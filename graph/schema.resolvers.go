package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"

	"github.com/cpreciad/transit/graph/model"
	"github.com/cpreciad/transit/internal/consolidator"
)

// Operators is the resolver for the operators field.
func (r *queryResolver) Operators(ctx context.Context) ([]*model.Operator, error) {
	panic(fmt.Errorf("not implemented: Operators - operators"))
}

// Operator is the resolver for the operator field.
func (r *queryResolver) Operator(ctx context.Context, id string) (*model.Operator, error) {
	panic(fmt.Errorf("not implemented: Operator - operator"))
}

// StopsForLine is the resolver for the stopsForLine field.
func (r *queryResolver) StopsForLine(ctx context.Context, operatorID string, lineID string) ([]*model.Stop, error) {
	stops := make(map[string][]string)
	stops["Carl St & Cole St"] = make([]string, 0)
	stops["Duboce St/Noe St/Duboce Park"] = make([]string, 0)
	stopInfo := consolidator.GetStopInfo(operatorID, lineID, stops)

	// construct the return for the stops
	for _, stop := range stopInfo {
		formattedStop := &model.Stop{
			ID:   "1",
			Name: stop.Direction.Outbound.StopName,
		}
		r.stops = append(r.stops, formattedStop)
	}
	return r.stops, nil

}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
